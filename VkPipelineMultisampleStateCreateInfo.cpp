/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY node-vulkan v0.0.1
 */
#include "utils.h"
#include "index.h"
#include "VkPipelineMultisampleStateCreateInfo.h"

Nan::Persistent<v8::FunctionTemplate> _VkPipelineMultisampleStateCreateInfo::constructor;

_VkPipelineMultisampleStateCreateInfo::_VkPipelineMultisampleStateCreateInfo() {
  instance.sType = VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO;
}

_VkPipelineMultisampleStateCreateInfo::~_VkPipelineMultisampleStateCreateInfo() {
  //printf("VkPipelineMultisampleStateCreateInfo deconstructed!!\n");
}

void _VkPipelineMultisampleStateCreateInfo::Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target) {
  Nan::HandleScope scope;

  // constructor
  v8::Local<v8::FunctionTemplate> ctor = Nan::New<v8::FunctionTemplate>(_VkPipelineMultisampleStateCreateInfo::New);
  constructor.Reset(ctor);
  ctor->InstanceTemplate()->SetInternalFieldCount(1);
  ctor->SetClassName(Nan::New("VkPipelineMultisampleStateCreateInfo").ToLocalChecked());

  // prototype
  v8::Local<v8::ObjectTemplate> proto = ctor->PrototypeTemplate();
  
  SetPrototypeAccessor(proto, Nan::New("sType").ToLocalChecked(), GetsType, SetsType, ctor);
  SetPrototypeAccessor(proto, Nan::New("flags").ToLocalChecked(), Getflags, Setflags, ctor);
  SetPrototypeAccessor(proto, Nan::New("rasterizationSamples").ToLocalChecked(), GetrasterizationSamples, SetrasterizationSamples, ctor);
  SetPrototypeAccessor(proto, Nan::New("sampleShadingEnable").ToLocalChecked(), GetsampleShadingEnable, SetsampleShadingEnable, ctor);
  SetPrototypeAccessor(proto, Nan::New("minSampleShading").ToLocalChecked(), GetminSampleShading, SetminSampleShading, ctor);
  SetPrototypeAccessor(proto, Nan::New("pSampleMask").ToLocalChecked(), GetpSampleMask, SetpSampleMask, ctor);
  SetPrototypeAccessor(proto, Nan::New("alphaToCoverageEnable").ToLocalChecked(), GetalphaToCoverageEnable, SetalphaToCoverageEnable, ctor);
  SetPrototypeAccessor(proto, Nan::New("alphaToOneEnable").ToLocalChecked(), GetalphaToOneEnable, SetalphaToOneEnable, ctor);
  Nan::Set(target, Nan::New("VkPipelineMultisampleStateCreateInfo").ToLocalChecked(), ctor->GetFunction());
}

NAN_METHOD(_VkPipelineMultisampleStateCreateInfo::New) {
  if (info.IsConstructCall()) {
    _VkPipelineMultisampleStateCreateInfo* self = new _VkPipelineMultisampleStateCreateInfo();
    self->Wrap(info.Holder());
    
    if (info[0]->IsObject()) {
      v8::Local<v8::Object> obj = info[0]->ToObject();
      v8::Local<v8::String> sAccess0 = Nan::New("sType").ToLocalChecked();
      v8::Local<v8::String> sAccess2 = Nan::New("flags").ToLocalChecked();
      v8::Local<v8::String> sAccess3 = Nan::New("rasterizationSamples").ToLocalChecked();
      v8::Local<v8::String> sAccess4 = Nan::New("sampleShadingEnable").ToLocalChecked();
      v8::Local<v8::String> sAccess5 = Nan::New("minSampleShading").ToLocalChecked();
      v8::Local<v8::String> sAccess6 = Nan::New("pSampleMask").ToLocalChecked();
      v8::Local<v8::String> sAccess7 = Nan::New("alphaToCoverageEnable").ToLocalChecked();
      v8::Local<v8::String> sAccess8 = Nan::New("alphaToOneEnable").ToLocalChecked();
      if (obj->Has(sAccess0)) info.This()->Set(sAccess0, obj->Get(sAccess0));
      if (obj->Has(sAccess2)) info.This()->Set(sAccess2, obj->Get(sAccess2));
      if (obj->Has(sAccess3)) info.This()->Set(sAccess3, obj->Get(sAccess3));
      if (obj->Has(sAccess4)) info.This()->Set(sAccess4, obj->Get(sAccess4));
      if (obj->Has(sAccess5)) info.This()->Set(sAccess5, obj->Get(sAccess5));
      if (obj->Has(sAccess6)) info.This()->Set(sAccess6, obj->Get(sAccess6));
      if (obj->Has(sAccess7)) info.This()->Set(sAccess7, obj->Get(sAccess7));
      if (obj->Has(sAccess8)) info.This()->Set(sAccess8, obj->Get(sAccess8));
      
    }
    
    info.GetReturnValue().Set(info.Holder());
  } else {
    Nan::ThrowError("VkPipelineMultisampleStateCreateInfo constructor cannot be invoked without 'new'");
  }
};

// sType
NAN_GETTER(_VkPipelineMultisampleStateCreateInfo::GetsType) {
  _VkPipelineMultisampleStateCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkPipelineMultisampleStateCreateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.sType));
}NAN_SETTER(_VkPipelineMultisampleStateCreateInfo::SetsType) {
  _VkPipelineMultisampleStateCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkPipelineMultisampleStateCreateInfo>(info.This());
  self->instance.sType = static_cast<VkStructureType>((int32_t)value->NumberValue());
}// flags
NAN_GETTER(_VkPipelineMultisampleStateCreateInfo::Getflags) {
  _VkPipelineMultisampleStateCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkPipelineMultisampleStateCreateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.flags));
}NAN_SETTER(_VkPipelineMultisampleStateCreateInfo::Setflags) {
  _VkPipelineMultisampleStateCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkPipelineMultisampleStateCreateInfo>(info.This());
  self->instance.flags = static_cast<VkPipelineMultisampleStateCreateFlags>((int32_t)value->NumberValue());
}// rasterizationSamples
NAN_GETTER(_VkPipelineMultisampleStateCreateInfo::GetrasterizationSamples) {
  _VkPipelineMultisampleStateCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkPipelineMultisampleStateCreateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.rasterizationSamples));
}NAN_SETTER(_VkPipelineMultisampleStateCreateInfo::SetrasterizationSamples) {
  _VkPipelineMultisampleStateCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkPipelineMultisampleStateCreateInfo>(info.This());
  self->instance.rasterizationSamples = static_cast<VkSampleCountFlagBits>((int32_t)value->NumberValue());
}// sampleShadingEnable
NAN_GETTER(_VkPipelineMultisampleStateCreateInfo::GetsampleShadingEnable) {
  _VkPipelineMultisampleStateCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkPipelineMultisampleStateCreateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.sampleShadingEnable));
}NAN_SETTER(_VkPipelineMultisampleStateCreateInfo::SetsampleShadingEnable) {
  _VkPipelineMultisampleStateCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkPipelineMultisampleStateCreateInfo>(info.This());
  self->instance.sampleShadingEnable = static_cast<uint32_t>(value->NumberValue());
}// minSampleShading
NAN_GETTER(_VkPipelineMultisampleStateCreateInfo::GetminSampleShading) {
  _VkPipelineMultisampleStateCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkPipelineMultisampleStateCreateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.minSampleShading));
}NAN_SETTER(_VkPipelineMultisampleStateCreateInfo::SetminSampleShading) {
  _VkPipelineMultisampleStateCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkPipelineMultisampleStateCreateInfo>(info.This());
  self->instance.minSampleShading = static_cast<float>(value->NumberValue());
}// pSampleMask
NAN_GETTER(_VkPipelineMultisampleStateCreateInfo::GetpSampleMask) {
  _VkPipelineMultisampleStateCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkPipelineMultisampleStateCreateInfo>(info.This());
  if (self->pSampleMask.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->pSampleMask);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkPipelineMultisampleStateCreateInfo::SetpSampleMask) {
  _VkPipelineMultisampleStateCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkPipelineMultisampleStateCreateInfo>(info.This());
  
    // js
    if (value->IsArray() || value->IsArrayBufferView()) {
      v8::Handle<v8::Array> arr = v8::Handle<v8::Array>::Cast(value);
      Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> obj(arr);
      self->pSampleMask = obj;
    } else {
      if (!self->pSampleMask.IsEmpty()) self->pSampleMask.Empty();
    }
  
  
  // vulkan
  if (value->IsArrayBufferView()) {
    self->instance.pSampleMask = getTypedArrayData<uint32_t>(value->ToObject(), nullptr);
  } else {
    self->instance.pSampleMask = nullptr;
  }
}// alphaToCoverageEnable
NAN_GETTER(_VkPipelineMultisampleStateCreateInfo::GetalphaToCoverageEnable) {
  _VkPipelineMultisampleStateCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkPipelineMultisampleStateCreateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.alphaToCoverageEnable));
}NAN_SETTER(_VkPipelineMultisampleStateCreateInfo::SetalphaToCoverageEnable) {
  _VkPipelineMultisampleStateCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkPipelineMultisampleStateCreateInfo>(info.This());
  self->instance.alphaToCoverageEnable = static_cast<uint32_t>(value->NumberValue());
}// alphaToOneEnable
NAN_GETTER(_VkPipelineMultisampleStateCreateInfo::GetalphaToOneEnable) {
  _VkPipelineMultisampleStateCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkPipelineMultisampleStateCreateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.alphaToOneEnable));
}NAN_SETTER(_VkPipelineMultisampleStateCreateInfo::SetalphaToOneEnable) {
  _VkPipelineMultisampleStateCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkPipelineMultisampleStateCreateInfo>(info.This());
  self->instance.alphaToOneEnable = static_cast<uint32_t>(value->NumberValue());
}