/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY node-vulkan v0.0.1
 */
#include "utils.h"
#include "index.h"
#include "VkPipelineViewportStateCreateInfo.h"

Nan::Persistent<v8::FunctionTemplate> _VkPipelineViewportStateCreateInfo::constructor;

_VkPipelineViewportStateCreateInfo::_VkPipelineViewportStateCreateInfo() {
  instance.sType = VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO;
}

_VkPipelineViewportStateCreateInfo::~_VkPipelineViewportStateCreateInfo() {
  //printf("VkPipelineViewportStateCreateInfo deconstructed!!\n");
}

void _VkPipelineViewportStateCreateInfo::Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target) {
  Nan::HandleScope scope;

  // constructor
  v8::Local<v8::FunctionTemplate> ctor = Nan::New<v8::FunctionTemplate>(_VkPipelineViewportStateCreateInfo::New);
  constructor.Reset(ctor);
  ctor->InstanceTemplate()->SetInternalFieldCount(1);
  ctor->SetClassName(Nan::New("VkPipelineViewportStateCreateInfo").ToLocalChecked());

  // prototype
  v8::Local<v8::ObjectTemplate> proto = ctor->PrototypeTemplate();
  
  SetPrototypeAccessor(proto, Nan::New("sType").ToLocalChecked(), GetsType, SetsType, ctor);
  SetPrototypeAccessor(proto, Nan::New("flags").ToLocalChecked(), Getflags, Setflags, ctor);
  SetPrototypeAccessor(proto, Nan::New("viewportCount").ToLocalChecked(), GetviewportCount, SetviewportCount, ctor);
  SetPrototypeAccessor(proto, Nan::New("pViewports").ToLocalChecked(), GetpViewports, SetpViewports, ctor);
  SetPrototypeAccessor(proto, Nan::New("scissorCount").ToLocalChecked(), GetscissorCount, SetscissorCount, ctor);
  SetPrototypeAccessor(proto, Nan::New("pScissors").ToLocalChecked(), GetpScissors, SetpScissors, ctor);
  Nan::Set(target, Nan::New("VkPipelineViewportStateCreateInfo").ToLocalChecked(), ctor->GetFunction());
}

NAN_METHOD(_VkPipelineViewportStateCreateInfo::New) {
  if (info.IsConstructCall()) {
    _VkPipelineViewportStateCreateInfo* self = new _VkPipelineViewportStateCreateInfo();
    self->Wrap(info.Holder());
    
    if (info[0]->IsObject()) {
      v8::Local<v8::Object> obj = info[0]->ToObject();
      v8::Local<v8::String> sAccess0 = Nan::New("sType").ToLocalChecked();
      v8::Local<v8::String> sAccess2 = Nan::New("flags").ToLocalChecked();
      v8::Local<v8::String> sAccess3 = Nan::New("viewportCount").ToLocalChecked();
      v8::Local<v8::String> sAccess4 = Nan::New("pViewports").ToLocalChecked();
      v8::Local<v8::String> sAccess5 = Nan::New("scissorCount").ToLocalChecked();
      v8::Local<v8::String> sAccess6 = Nan::New("pScissors").ToLocalChecked();
      if (obj->Has(sAccess0)) info.This()->Set(sAccess0, obj->Get(sAccess0));
      if (obj->Has(sAccess2)) info.This()->Set(sAccess2, obj->Get(sAccess2));
      if (obj->Has(sAccess3)) info.This()->Set(sAccess3, obj->Get(sAccess3));
      if (obj->Has(sAccess4)) info.This()->Set(sAccess4, obj->Get(sAccess4));
      if (obj->Has(sAccess5)) info.This()->Set(sAccess5, obj->Get(sAccess5));
      if (obj->Has(sAccess6)) info.This()->Set(sAccess6, obj->Get(sAccess6));
      
    }
    
    info.GetReturnValue().Set(info.Holder());
  } else {
    Nan::ThrowError("VkPipelineViewportStateCreateInfo constructor cannot be invoked without 'new'");
  }
};

// sType
NAN_GETTER(_VkPipelineViewportStateCreateInfo::GetsType) {
  _VkPipelineViewportStateCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkPipelineViewportStateCreateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.sType));
}NAN_SETTER(_VkPipelineViewportStateCreateInfo::SetsType) {
  _VkPipelineViewportStateCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkPipelineViewportStateCreateInfo>(info.This());
  self->instance.sType = static_cast<VkStructureType>((int32_t)value->NumberValue());
}// flags
NAN_GETTER(_VkPipelineViewportStateCreateInfo::Getflags) {
  _VkPipelineViewportStateCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkPipelineViewportStateCreateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.flags));
}NAN_SETTER(_VkPipelineViewportStateCreateInfo::Setflags) {
  _VkPipelineViewportStateCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkPipelineViewportStateCreateInfo>(info.This());
  self->instance.flags = static_cast<VkPipelineViewportStateCreateFlags>((int32_t)value->NumberValue());
}// viewportCount
NAN_GETTER(_VkPipelineViewportStateCreateInfo::GetviewportCount) {
  _VkPipelineViewportStateCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkPipelineViewportStateCreateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.viewportCount));
}NAN_SETTER(_VkPipelineViewportStateCreateInfo::SetviewportCount) {
  _VkPipelineViewportStateCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkPipelineViewportStateCreateInfo>(info.This());
  self->instance.viewportCount = static_cast<uint32_t>(value->NumberValue());
}// pViewports
NAN_GETTER(_VkPipelineViewportStateCreateInfo::GetpViewports) {
  _VkPipelineViewportStateCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkPipelineViewportStateCreateInfo>(info.This());
  if (self->pViewports.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->pViewports);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkPipelineViewportStateCreateInfo::SetpViewports) {
  _VkPipelineViewportStateCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkPipelineViewportStateCreateInfo>(info.This());
  
    // js
    if (value->IsArray() || value->IsArrayBufferView()) {
      v8::Handle<v8::Array> arr = v8::Handle<v8::Array>::Cast(value);
      Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> obj(arr);
      self->pViewports = obj;
    } else {
      if (!self->pViewports.IsEmpty()) self->pViewports.Empty();
    }
  
  // vulkan
  if (!(value->IsNull())) {
    self->instance.pViewports = copyArrayOfV8Objects<VkViewport, _VkViewport>(value);
  } else {
    self->instance.pViewports = nullptr;
  }
}// scissorCount
NAN_GETTER(_VkPipelineViewportStateCreateInfo::GetscissorCount) {
  _VkPipelineViewportStateCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkPipelineViewportStateCreateInfo>(info.This());
  info.GetReturnValue().Set(Nan::New<v8::Number>(self->instance.scissorCount));
}NAN_SETTER(_VkPipelineViewportStateCreateInfo::SetscissorCount) {
  _VkPipelineViewportStateCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkPipelineViewportStateCreateInfo>(info.This());
  self->instance.scissorCount = static_cast<uint32_t>(value->NumberValue());
}// pScissors
NAN_GETTER(_VkPipelineViewportStateCreateInfo::GetpScissors) {
  _VkPipelineViewportStateCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkPipelineViewportStateCreateInfo>(info.This());
  if (self->pScissors.IsEmpty()) {
    info.GetReturnValue().SetNull();
  } else {
    v8::Local<v8::Object> obj = Nan::New(self->pScissors);
    info.GetReturnValue().Set(obj);
  }
}NAN_SETTER(_VkPipelineViewportStateCreateInfo::SetpScissors) {
  _VkPipelineViewportStateCreateInfo *self = Nan::ObjectWrap::Unwrap<_VkPipelineViewportStateCreateInfo>(info.This());
  
    // js
    if (value->IsArray() || value->IsArrayBufferView()) {
      v8::Handle<v8::Array> arr = v8::Handle<v8::Array>::Cast(value);
      Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> obj(arr);
      self->pScissors = obj;
    } else {
      if (!self->pScissors.IsEmpty()) self->pScissors.Empty();
    }
  
  // vulkan
  if (!(value->IsNull())) {
    self->instance.pScissors = copyArrayOfV8Objects<VkRect2D, _VkRect2D>(value);
  } else {
    self->instance.pScissors = nullptr;
  }
}